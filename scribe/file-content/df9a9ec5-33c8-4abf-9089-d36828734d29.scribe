resource "file-content" "df9a9ec5-33c8-4abf-9089-d36828734d29" {
  uuid = "df9a9ec5-33c8-4abf-9089-d36828734d29"
  content = <<EOFSCRIBE
package com.morpheus

import groovy.json.*
import groovy.sql.Sql
import com.morpheus.MorpheusUtils
import com.morpheusdata.core.util.HttpApiClient
import com.morpheusdata.core.util.HttpApiClient.RequestOptions

/*
def APPLIANCE_URL = morpheus.applianceUrl
def MORPHEUS_API_TOKEN = morpheus.getApiAccessToken() ?: cypher.read('secret/morpheus-api-token')

// Method to call the API
def callApi(String url) {
    def client = new HttpApiClient()
    def requestOptions = new HttpApiClient.RequestOptions()
    requestOptions.headers = ["Authorization": "Bearer ${MORPHEUS_API_TOKEN}"]

    def interfaceResponse = client.callJsonApi(url, null, null, null, requestOptions, 'GET')
    if (interfaceResponse.success) {
        println "\u001B[36mInterfaces:\n${interfaceResponse.data}\u001B[0m"
        return interfaceResponse.data
    } else {
        println "\u001B[31mError getting interfaces from API:\r\n${interfaceResponse.errors}\u001B[0m"
        return null
    }
}
*/

Map getDatasource(String fromSource) {
    def datasource = ["url": "", "username": "morpheus", "password": "", "driverClassName": "com.mysql.cj.jdbc.Driver"]
    switch(fromSource) {
        case "shell":
            datasource = results['getDatasourceDetails'].dataSource ?: results.getDatasourceDetails.dataSource
            break
        case "cypher":
            def CYPHER_PATH = 'secret/morpheus-mysql-datasource'
            def CYPHER_RESULT = cypher.read(CYPHER_PATH)
            if (CYPHER_RESULT != null) {
                try {
                    def CYPHER_MAP = MorpheusUtils.getJson(CYPHER_RESULT)
                    datasource = CYPHER_MAP.dataSource
                } catch (Exception e) {
                    println "\u001B[31mError parsing dataSource object from Cypher:\n${e.getMessage()}\nStacktrace:\n${e.printStackTrace()}\u001B[0m"
                }
            }
            break
        default:
            println "\u001B[33mUsing default datasource config: ${datasource}\u001B[0m"
            break
    }
    return datasource
}

static Sql getSqlClient(Map datasource) {
    def sql
    try {
        sql = Sql.newInstance(datasource.url, datasource.username, datasource.password, datasource.driverClassName)
        def testQuery = sql.rows("SELECT id FROM compute_server LIMIT 3;")
        if (testQuery.size() >= 1) {
            println """
                    \u001B[32m
          Datasource connection initialised: ${sql.getProperties()}
                    \u001B[0m
                    """
        }
    } catch (Exception e) {
        println "\u001B[31mError building sql client...\n\u001B[0m"
        println "\u001B[31mDEBUG\n--------\nerror: ${e.getMessage()}\nexception: ${e.printStackTrace()}\u001B[0m"
    }
    return sql
}

def getCurrentNetworkInterfaces() {
    def currentInterfaces = results['getCurrentInterfaces'] ?: results.getCurrentInterfaces
    return currentInterfaces
}

def updateInterfaces(Sql sql, List<Map> currentInterfaces) {
    println "\u001B[36mInterfaces before SQL update:\r\n${getCurrentNetworkInterfaces()}\u001B[0m\r\n"
    def primary = currentInterfaces.find { it.primaryInterface == true }
    def secondary = currentInterfaces.find { it.primaryInterface == false }

    if (primary && secondary) {
        def updatePrimaryToSecondary = """
            UPDATE compute_server_interface
            SET primary_interface = false
            WHERE mac_address = '${primary.macAddress}'
        """
        println("\u001B[34mExecuting SQL query [update primary interface to FALSE]:\n${updatePrimaryToSecondary}\u001B[0m\r\n")
        sql.execute(updatePrimaryToSecondary)
        println("\u001B[34mSQL query executed successfully: [update primary interface to FALSE]\u001B[0m\r\n")

        def updateSecondaryToPrimary = """
            UPDATE compute_server_interface
            SET primary_interface = true
            WHERE mac_address = '${secondary.macAddress}'
        """
        println("\u001B[34mExecuting SQL query [update secondary interface to primary (TRUE)]:\r\n${updateSecondaryToPrimary}\u001B[0m\r\n")
        sql.execute(updateSecondaryToPrimary)
        println("\u001B[34mSQL query executed successfully: [update secondary interface to primary (TRUE)]\u001B[0m\r\n")
        
        def interfaceUpdateResults = sql.rows("SELECT * FROM compute_server_interface WHERE mac_address in (?, ?)", [primary.macAddress, secondary.macAddress])
        println("\u001B[35;1mInterfaces post-update:\r\n\u001B[0m\r\n")
        def jsonOutput = JsonOutput.toJson(interfaceUpdateResults)
		def prettyJson = JsonOutput.prettyPrint(jsonOutput)
        println("\u001B[32m${prettyJson}\u001B[0m\r\n")
    } else {
        println("\u001B[31mNo valid primary and secondary interfaces found for update.\u001B[0m\r\n")
    }
}

def main() {
    def datasource = getDatasource("cypher") ?: getDatasource("shell")
    def sql = null
    try {
        sql = getSqlClient(datasource)
        if (sql) {
            println "\u001B[32mConnection to database established successfully... \r\n${sql.properties}\u001B[0m\r\n"
            def currentNetworkInterfaces = getCurrentNetworkInterfaces()
            if (currentNetworkInterfaces) {
                updateInterfaces(sql, currentNetworkInterfaces)
            }
        }
    } catch(Exception ex) {
        println "\u001B[31mERROR IN SCRIPT:\r\n${ex}\r\nStacktrace:\r\n${ex.printStackTrace()}\u001B[0m"
    } finally {
        if (sql) {
            sql.close()
        }
    }
}

main()
EOFSCRIBE
  dateCreated = "2024-07-06T16:14:12.000Z"
  lastUpdated = "2024-07-12T20:12:27.000Z"
}